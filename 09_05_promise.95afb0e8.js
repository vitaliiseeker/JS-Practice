const e=new Promise(((e,o)=>{setTimeout((()=>{o("Error! Error passed to reject function")}),2e3)}));console.log("Before promise.then()"),e.then((e=>{console.log("onResolve call inside promise.then()"),console.log(e)}),(e=>{console.log("onReject call inside promise.then()"),console.log(e)})),console.log("After promise.then()");new Promise(((e,o)=>{setTimeout((()=>{e(5)}),2e3)})).then((e=>(console.log(e),2*e))).then((e=>(console.log(e),3*e))).then((e=>{console.log(e)})).catch((e=>{console.log(e)})).finally((()=>{console.log("Final task")}));var o,s;o="Mango",s=e=>{console.log(e)},console.log(`Fetching data for ${o}`),setTimeout((()=>{s("success value")}),2e3);(e=>new Promise(((o,s)=>{console.log(`Fetching data for ${e}`),setTimeout((()=>{s("error")}),2e3)})))("Mango").then((e=>console.log(e))).catch((e=>console.error(e)));const n=(e,o)=>new Promise((s=>{setTimeout((()=>s(e)),o)})),l=n("promiseA value",1e3),c=n("promiseB value",3e3);Promise.all([l,c]).then((e=>console.log(e))).catch((e=>console.log(e)));const r=(e,o)=>new Promise((s=>{setTimeout((()=>s(e)),o)})),t=r("promiseA1 value",1e3),i=r("promiseB1 value",3e3);Promise.race([t,i]).then((e=>console.log(e))).catch((e=>console.log(e))),new Promise((e=>e("success value"))).then((e=>console.log(e))),Promise.resolve("success value").then((e=>console.log(e))),new Promise(((e,o)=>o("error"))).catch((e=>console.error(e))),Promise.reject("error").catch((e=>console.error(e)));const m=""===(a="Mango")||void 0===a?{success:!1,message:"Guest name must not be empty"}:{success:!0,message:`Welcome ${a}`};var a;m.success?console.log(m.message):console.error(m.message);((e,o,s)=>{if(""===e||void 0===e)return s("Guest name must not be empty");o(`Welcome ${e}`)})("Mango",(e=>console.log(e)),(e=>console.error(e)));console.log("script start"),setTimeout((function(){console.log("setTimeout")}),0),Promise.resolve().then((function(){console.log("promise1")})).then((function(){console.log("promise2")})),console.log("script end");
//# sourceMappingURL=09_05_promise.95afb0e8.js.map
