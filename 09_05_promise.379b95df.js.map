{"mappings":"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","sources":["src/js/09_05_promise.js"],"sourcesContent":["// Change value of isSuccess variable to call resolve or reject\nconst isSuccess = false;\n\nconst promise = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    if (isSuccess) {\n      resolve(\"Success! Value passed to resolve function\");\n    } else {\n      reject(\"Error! Error passed to reject function\");\n    }\n  }, 2000);\n});\n\n// Will run first\nconsole.log(\"Before promise.then()\");\n\n// Registering promise callbacks\npromise.then(\n  // onResolve will run third or not at all\n  value => {\n    console.log(\"onResolve call inside promise.then()\");\n    console.log(value); // \"Success! Value passed to resolve function\"\n  },\n  // onReject will run third or not at all\n  error => {\n    console.log(\"onReject call inside promise.then()\");\n    console.log(error); // \"Error! Error passed to reject function\"\n  }\n);\n\n// Will run second\nconsole.log(\"After promise.then()\");\n\n//---------------------------------\n\nconst promise1 = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve(5);\n  }, 2000);\n});\n\npromise1\n  .then(value => {\n    console.log(value); // 5\n    return value * 2;\n  })\n  .then(value => {\n    console.log(value); // 10\n    return value * 3;\n  })\n  .then(value => {\n    console.log(value); // 30\n  })\n  .catch(error => {\n    console.log(error);\n  })\n  .finally(() => {\n    console.log(\"Final task\");\n  });\n\n//-----------------------\n\nconst fetchUserFromServer = (username, onSuccess, onError) => {\n  console.log(`Fetching data for ${username}`);\n\n  setTimeout(() => {\n    // Change value of isSuccess variable to simulate request status\n    const isSuccess = true;\n\n    if (isSuccess) {\n      onSuccess(\"success value\");\n    } else {\n      onError(\"error\");\n    }\n  }, 2000);\n};\n\nconst onFetchSuccess = user => {\n  console.log(user);\n};\n\nconst onFetchError = error => {\n  console.error(error);\n};\n\nfetchUserFromServer(\"Mango\", onFetchSuccess, onFetchError);\n\n//--------------------------------------------\n\nconst fetchUserFromServer1 = username => {\n  return new Promise((resolve, reject) => {\n    console.log(`Fetching data for ${username}`);\n\n    setTimeout(() => {\n      // Change value of isSuccess variable to simulate request status\n      const isSuccess = false;\n\n      if (isSuccess) {\n        resolve(\"success value\");\n      } else {\n        reject(\"error\");\n      }\n    }, 2000);\n  });\n};\n\nfetchUserFromServer1(\"Mango\")\n  .then(user => console.log(user))\n  .catch(error => console.error(error));\n\n//-----------------------------------------\n\nconst makePromise = (text, delay) => {\n  return new Promise(resolve => {\n    setTimeout(() => resolve(text), delay);\n  });\n};\n\nconst promiseA = makePromise(\"promiseA value\", 1000);\nconst promiseB = makePromise(\"promiseB value\", 3000);\n\nPromise.all([promiseA, promiseB])\n  .then(value => console.log(value)) //[\"promiseA value\", \"promiseB value\"]\n  .catch(error => console.log(error));\n\n//----------------------------------------------------\n\nconst makePromise1 = (text, delay) => {\n  return new Promise(resolve => {\n    setTimeout(() => resolve(text), delay);\n  });\n};\n\nconst promiseA1 = makePromise1(\"promiseA1 value\", 1000);\nconst promiseB1 = makePromise1(\"promiseB1 value\", 3000);\n\nPromise.race([promiseA1, promiseB1])\n  .then(value => console.log(value)) // \"promiseA value\"\n  .catch(error => console.log(error));\n\n//-----------------------------------------------------\n\n// Fulfilled promise\nnew Promise(resolve => resolve(\"success value\")).then(value =>\n  console.log(value)\n);\n\nPromise.resolve(\"success value\").then(value => console.log(value));\n\n// Rejected promise\nnew Promise((resolve, reject) => reject(\"error\")).catch(error =>\n  console.error(error)\n);\n\nPromise.reject(\"error\").catch(error => console.error(error));\n\n//-----------------------------------------------------\n\n// Ці методи використовуються для промісифікаціі функцій, коли необхідно побудувати ланцюжок промісів і вже є початкове значення.Виконаємо рефакторинг наступного коду.\n\nconst makeGreeting = guestName => {\n  if (guestName === \"\" || guestName === undefined) {\n    return {\n      success: false,\n      message: \"Guest name must not be empty\",\n    };\n  }\n\n  return {\n    success: true,\n    message: `Welcome ${guestName}`,\n  };\n};\n\nconst result = makeGreeting(\"Mango\");\n\nif (result.success) {\n  console.log(result.message);\n} else {\n  console.error(result.message);\n}\n\n//-----------------------------------------------------\n\n// Використовуючи колбек, відпадає необхідність повертати складні об'єкти зі статусом операції і перевіряти його у зовнішньому коді.\n\nconst makeGreeting1 = (guestName, onSuccess, onError) => {\n  if (guestName === \"\" || guestName === undefined) {\n    return onError(\"Guest name must not be empty\");\n  }\n  onSuccess(`Welcome ${guestName}`);\n};\n\nmakeGreeting1(\n  \"Mango\",\n  greeting => console.log(greeting),\n  error => console.error(error)\n);\n\n//-----------------------------------------------------\n// Останнім кроком буде промісифікація функції makeGreeting() для того, щоб повністю усунути її залежність від зовнішнього коду.\n\nconst makeGreeting2 = guestName => {\n  if (guestName === \"\" || guestName === undefined) {\n    return Promise.reject(\"Guest name must not be empty\");\n  }\n\n  Promise.resolve(`Welcome ${guestName}`);\n};\n\n// makeGreeting2(\"Mango\").then(greeting => console.log(greeting))\n//   .catch(error => console.error(error));\n\n//-----------------------------------------------------\n\nconsole.log('script start');\n\nsetTimeout(function () {\n  console.log('setTimeout');\n}, 0);\n\nPromise.resolve()\n  .then(function () {\n    console.log('promise1');\n  })\n  .then(function () {\n    console.log('promise2');\n  });\n\nconsole.log('script end');\n\n  //-----------------------------------------------------\n\n\n\n  //-----------------------------------------------------\n\n"],"names":["$2345a9f72c706cfe$var$promise","Promise","resolve","reject","setTimeout","console","log","then","value","error","catch","finally","username","onSuccess","user","concat","$2345a9f72c706cfe$var$fetchUserFromServer1","$2345a9f72c706cfe$var$makePromise","text","delay","$2345a9f72c706cfe$var$promiseA","$2345a9f72c706cfe$var$promiseB","all","$2345a9f72c706cfe$var$makePromise1","$2345a9f72c706cfe$var$promiseA1","$2345a9f72c706cfe$var$promiseB1","race","guestName","$2345a9f72c706cfe$var$result","undefined","success","message","onError","$2345a9f72c706cfe$var$makeGreeting1","greeting"],"version":3,"file":"09_05_promise.379b95df.js.map"}